#!/bin/sh

#get basic info of config from ansible -m setup
parse_baseconfig() {
    config_hostname=`hostname`
    config_kernel=`uname -r`
    config_os=`cat /etc/os-release|grep ^PRETTY_NAME| awk -F'\"' '{print $2}'`
    
    echo \"hostName\" : \"$config_hostname\", >> $2
    echo \"kernel\" : \"$config_kernel\", >> $2
    echo \"os\" : \"$config_os\", >> $2
}

#get system info from ansible -m setup
parse_system() {
    inBase=0
    cat $1 | while read line
    do
      if [ "x$line" = "xSystem Information" ]; then
         inBase=1
      fi
    
      if [ $inBase -eq 1 ]; then
        key=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $1}'`
        value=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $2}'`
        case "$key" in
          "Manufacturer")
            baseboard_manufacturer=$value
          ;;
          "Product Name")
            baseboard_name=$value
          ;;
          "Version")
            baseboard_version=$value
          ;;
        esac

        if [ "x$line" = "x" ]; then
            echo \"system\": \{ >> $2
            echo "    \"name\" :" \"$baseboard_name\", >> $2
            echo "    \"manufacturer\" :" \"$baseboard_manufacturer\", >> $2
            echo "    \"version\" :" \"$baseboard_version\" >> $2
            echo \}, >> $2

            break
        fi
      fi
    done
}
parse_baseboard() {
    inBase=0
    cat $1 | while read line
    do
      if [ "x$line" = "xBase Board Information" ]; then
         inBase=1
      fi
    
      if [ $inBase -eq 1 ]; then
        key=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $1}'`
        value=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $2}'`
        case "$key" in
          "Manufacturer")
            baseboard_manufacturer=$value
          ;;
          "Product Name")
            baseboard_name=$value
          ;;
          "Version")
            baseboard_version=$value
          ;;
        esac

        if [ "x$line" = "x" ]; then
            echo \"baseboard\" : \{ >> $2
            echo "    \"name\" :" \"$baseboard_name\", >> $2
            echo "    \"manufacturer\" :" \"$baseboard_manufacturer\", >> $2
            echo "    \"version\" :" \"$baseboard_version\" >> $2
            echo \}, >> $2

            break
        fi
      fi
    done
}

parse_cpu() {
    echo \"cpuInfo\": \[ >> $2
    cpuCount=0
    inCpu=0
    cat $1 | while read line
    do
      if [ "x$line" = "xProcessor Information" ]; then
         inCpu=1
      fi
    
      if [ $inCpu -eq 1 ]; then
          key=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $1}'`
          value=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $2}'`
          case "$key" in
          "Socket Designation")
              cpu_socketDes=$value
          ;;
          "Manufacturer")
              cpu_Manufacturer=$value
          ;;
          "Version")
              cpu_version=$value
          ;;
          "Max Speed")
              cpu_maxSpeed=$value
          ;;
          "Current Speed")
              cpu_currentSpeed=$value
          ;;
          "Status")
              cpu_status=$value
          ;;
          "Core Count")
              cpu_coreCount=$value
          ;;
          "Core Enabled")
              cpu_coreEnabledCount=$value
          ;;
          "Thread Count")
              cpu_threadCount=$value
          ;;
          esac
      
          if [ "x$line" = "x" ]; then
            if [ $cpuCount -gt 0 ]; then
	        echo "," >> $2
            fi
            echo \{ >> $2
            echo \"socketdes\" : \"$cpu_socketDes\", >> $2
            echo \"manufacturer\" : \"$cpu_Manufacturer\", >> $2
            echo \"version\" : \"$cpu_version\", >> $2
            echo \"maxSpeed\" : \"$cpu_maxSpeed\", >> $2
            echo \"currentSpeed\" : \"$cpu_currentSpeed\", >> $2
            echo \"status\" : \"$cpu_status\", >> $2
            echo \"coreCount\" : \"$cpu_coreCount\", >> $2
            echo \"coreEnabledCount\" : \"$cpu_coreEnabledCount\", >> $2
            echo \"threadCount\" : \"$cpu_threadCount\" >> $2
            echo -n \} >> $2

            inCpu=0
            cpuCount=$((cpuCount + 1 ))
          fi
      fi
    done
    echo \], >> $2
}

parse_memory() {
    echo \"memInfo\": \[ >> $2

    memCount=0
    inMem=0
    cat $1 | while read line
    do
      if [ "x$line" = "xMemory Device" ]; then
        inMem=1
        memory_size=""
      fi
    
      if [ $inMem -eq 1 ]; then
          key=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $1}'`
          value=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $2}'`
          case "$key" in
          "Manufacturer")
              memory_manufacturer=$value
          ;;
          "Speed")
              memory_speed=$value
          ;;
          "Type")
              memory_type=$value
          ;;
          "Size")
              memory_size=$value
          ;;
	  "Configured Clock Speed")
              memory_clockSpeed=$value
          ;;
          "Bank Locator")
              memory_bankLocator=$value
          ;;
          esac
      
          if [ "x$line" = "x" ]; then

	    #echo "x$memory_size"
	    if [ ! "x$memory_size" = "xNo Module Installed" ]; then
                if [ $memCount -gt 0 ]; then
                    echo "," >> $2
                fi

                echo \{ >> $2
                echo \"manufacturer\" : \"$memory_manufacturer\", >> $2
                echo \"size\" : \"$memory_size\", >> $2
                echo \"type\" : \"$memory_type\", >> $2
                echo \"speed\" : \"$memory_speed\", >> $2
                echo \"clockSpeed\" : \"$memory_clockSpeed\", >> $2
                echo \"bankLocator\" : \"$memory_bankLocator\" >> $2
                echo -n \} >> $2
                memCount=$((memCount + 1 ))
	    fi

            inMem=0
          fi
      fi
    done
    echo \], >> $2
}
    

parse_cache() {
    echo \"cacheInfo\": \[ >> $2

    cacheCount=0
    inCache=0
    cat $1 | while read line
    do
      if [ "x$line" = "xCache Information" ]; then
         inCache=1
      fi
    
      if [ $inCache -eq 1 ]; then
          key=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $1}'`
          value=`echo $line | awk -F ':' '{gsub(/^[ \t]+/,"",$2);print $2}'`
          case "$key" in
          "Socket Designation")
              cache_socketDes=$value
          ;;
          "Installed Size")
              cache_size=$value
          ;;
          "Operational Mode")
              cache_operational=$value
          ;;
          "Size")
          esac
      
          if [ "x$line" = "x" ] ; then
	    if [ ! "x$cache_size" = "x0 kB" ]; then
            
                if [ $cacheCount -gt 0 ]; then
                    echo "," >> $2
                fi
    
                echo \{ >> $2
                echo \"socketdes\" : \"$cache_socketDes\", >> $2
                echo \"size\" : \"$cache_size\", >> $2
                echo \"operational\" : \"$cache_operational\" >> $2
                echo -n \} >> $2
                cacheCount=$((cacheCount + 1 ))
	    fi

            inCache=0
          fi
      fi
    done
    echo \], >> $2
    
}


parse_storage() {
    echo \"storageInfo\": \[ >> $2

    storageInfo_count=`jq .blockdevices[].name $1 | wc -l`
    idx=0
    disk_count=0
    while [ $idx -lt $storageInfo_count ]; do
        storageInfo_device=`jq -r .blockdevices[$idx].name $1`
        storageInfo_type=`jq -r .blockdevices[$idx].type $1`
        storageInfo_capability=`jq -r .blockdevices[$idx].size $1`
        storageInfo_sectorsize=`jq -r .blockdevices[$idx].logsec $1`
        storageInfo_model=`jq -r .blockdevices[$idx].model $1`

	if [ ! "x$storageInfo_type" = "xdisk" ]; then 
	    idx=$((idx + 1 ))
	    continue
	fi

	if [ $disk_count -gt 0 ]; then echo "," >> $2; fi

        echo "{" >> $2
        echo \"deviceName\" : \"$storageInfo_device\", >> $2
        echo \"model\" : \"$storageInfo_model\", >> $2
        echo \"capacity\" : \"$storageInfo_capability\", >> $2
        echo \"sectorsize\" : \"$storageInfo_sectorsize\", >> $2

        parts_count=`jq -r .blockdevices[$idx].children[].name $1 | wc -l`
	#if [ $parts_count -gt 0 ]; then
	#    echo \"partitons\" : \[ >> $2
	#fi

	echo \"partitons\" : \[ >> $2

        part_idx=0
        while [ $part_idx -lt $parts_count ]; do
            part_name=`jq -r .blockdevices[$idx].children[$part_idx].name $1`
            part_size=`jq -r .blockdevices[$idx].children[$part_idx].size $1`
	    if [ $part_idx -gt 0 ]; then echo "," >> $2; fi
	    echo \{ >> $2
	    echo \"name\" : \"$part_name\", >> $2
	    echo \"size\" : \"$part_size\" >> $2
	    echo -n \} >> $2

            part_idx=$((part_idx + 1 ))
	done
	echo \] >> $2

	echo -n \} >> $2
        idx=$((idx + 1 ))
        disk_count=$((disk_count + 1 ))
    done

    echo \], >> $2
}

parse_network() {
    echo \"netInfo\": \[ >> $2

    idx=0

    for interface in $(ls /sys/class/net/); do
        if [ $interface = "lo" ]; then continue; fi
        echo $interface | grep -E 'virbr|docker' > /dev/null
        if [ $? -eq 0 ]; then continue; fi

        netinfo_interface=$interface
        netinfo_bandWidth=`cat /sys/class/net/$interface/speed`
        netinfo_driver_tmp=`readlink /sys/class/net/$interface/device/driver/module`
        netinfo_driver=`basename $netinfo_driver_tmp`
        netinfo_driverVersion=`modinfo $netinfo_driver|grep ^version| awk '{print $2}'`
        netinfo_mac=`cat /sys/class/net/$interface/address`

	if [ $idx -gt 0 ]; then
	    echo "," >> $2
        fi
	echo \{ >> $2
	echo "  \"interface\" : \"$netinfo_interface\"," >> $2
	echo "  \"bankWidth\" : \"$netinfo_bandWidth\"," >> $2
	echo "  \"driver\" : \"$netinfo_driver\"," >> $2
	echo "  \"driverVersion\" : \"$netinfo_driverVersion\"," >> $2
	echo "  \"protocolType\" : \"ipv4\"," >> $2
	echo "  \"mac\" : \"$netinfo_mac\"," >> $2
        python netinfo.py $interface >> $2
	echo -n \} >> $2

	idx=$((idx + 1 ))
    done
    echo "]" >> $2   
}

#echo \{ > aa
#parse_baseconfig output aa
#parse_system output aa
#parse_baseboard dmi aa
#parse_cpu dmi aa
#parse_memory dmi aa
#parse_cache dmi aa
#parse_storage blk aa
#parse_network output aa
#echo \} >> aa
